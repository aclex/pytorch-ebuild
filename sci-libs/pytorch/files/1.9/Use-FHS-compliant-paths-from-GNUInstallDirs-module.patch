From f944491b791dbf29c4ae060c23430e6f528c2739 Mon Sep 17 00:00:00 2001
From: Alexey Chernov <4ernov@gmail.com>
Date: Mon, 17 Aug 2020 19:28:59 +0300
Subject: [PATCH] Use FHS-compliant paths from `GNUInstallDirs` module

Use paths provided by `GNUInstallDirs` CMake module, so
that paths of the installed pieces were FHS-compliant and
root filesystem friendly.

Signed-off by: Alexey Chernov <4ernov@gmail.com>
---
 CMakeLists.txt                        |  3 +++
 aten/CMakeLists.txt                   |  6 +++---
 aten/src/ATen/CMakeLists.txt          |  8 ++++----
 aten/src/ATen/cpu/tbb/CMakeLists.txt  | 10 ++++++----
 c10/CMakeLists.txt                    |  6 +++---
 c10/cuda/CMakeLists.txt               |  6 +++---
 c10/hip/CMakeLists.txt                |  6 +++---
 caffe2/CMakeLists.txt                 |  8 ++++----
 caffe2/proto/CMakeLists.txt           |  2 +-
 modules/detectron/CMakeLists.txt      |  6 +++---
 modules/module_test/CMakeLists.txt    |  2 +-
 modules/observers/CMakeLists.txt      |  3 +--
 modules/rocksdb/CMakeLists.txt        |  2 +-
 test/cpp/api/CMakeLists.txt           |  2 +-
 test/cpp/dist_autograd/CMakeLists.txt |  2 +-
 test/cpp/jit/CMakeLists.txt           |  2 +-
 torch/CMakeLists.txt                  |  2 +-
 torch/lib/c10d/CMakeLists.txt         |  4 ++--
 torch/lib/libshm/CMakeLists.txt       |  8 ++++----
 19 files changed, 46 insertions(+), 42 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 50f7657..74799c7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -112,6 +112,9 @@ if(NOT LINUX)
   endif()
 endif()
 
+# Make installation paths FHS-compliant as much, as possible
+include(GNUInstallDirs)
+
 # ---[ Options.
 # Note to developers: if you add an option below, make sure you also add it to
 # cmake/Summary.cmake so that the summary prints out the option values.
diff --git a/aten/CMakeLists.txt b/aten/CMakeLists.txt
index 5f562a7..dc4edeb 100644
--- a/aten/CMakeLists.txt
+++ b/aten/CMakeLists.txt
@@ -36,9 +36,9 @@ set(ATen_CUDA_DEPENDENCY_LIBS)
 set(ATen_HIP_DEPENDENCY_LIBS)
 set(ATen_PUBLIC_CUDA_DEPENDENCY_LIBS)
 set(ATen_PUBLIC_HIP_DEPENDENCY_LIBS)
-set(ATEN_INSTALL_BIN_SUBDIR "bin" CACHE PATH "ATen install binary subdirectory")
-set(ATEN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "ATen install library subdirectory")
-set(ATEN_INSTALL_INCLUDE_SUBDIR "include" CACHE PATH "ATen install include subdirectory")
+set(ATEN_INSTALL_BIN_SUBDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH "ATen install binary subdirectory")
+set(ATEN_INSTALL_LIB_SUBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "ATen install library subdirectory")
+set(ATEN_INSTALL_INCLUDE_SUBDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH "ATen install include subdirectory")
 
 if(USE_CUDA)
   list(APPEND ATen_CUDA_INCLUDE ${CUDA_INCLUDE_DIRS})
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 9402d28..ccfc89d 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -10,10 +10,10 @@ endif(NOT MSVC)
 
 # Can be compiled standalone
 if(NOT AT_INSTALL_BIN_DIR OR NOT AT_INSTALL_LIB_DIR OR NOT AT_INSTALL_INCLUDE_DIR OR NOT AT_INSTALL_SHARE_DIR)
-  set(AT_INSTALL_BIN_DIR "bin" CACHE PATH "AT install binary subdirectory")
-  set(AT_INSTALL_LIB_DIR "lib" CACHE PATH "AT install library subdirectory")
-  set(AT_INSTALL_INCLUDE_DIR "include" CACHE PATH "AT install include subdirectory")
-  set(AT_INSTALL_SHARE_DIR "share" CACHE PATH "AT install include subdirectory")
+  set(AT_INSTALL_BIN_DIR ${CMAKE_INSTALL_BINDIR} CACHE PATH "AT install binary subdirectory")
+  set(AT_INSTALL_LIB_DIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "AT install library subdirectory")
+  set(AT_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH "AT install include subdirectory")
+  set(AT_INSTALL_SHARE_DIR ${CMAKE_INSTALL_DATAROOTDIR} CACHE PATH "AT install include subdirectory")
 endif()
 
 # this flag is used in Config but set externally, we must normalize it
diff --git a/aten/src/ATen/cpu/tbb/CMakeLists.txt b/aten/src/ATen/cpu/tbb/CMakeLists.txt
index 5a2c93b..9170711 100644
--- a/aten/src/ATen/cpu/tbb/CMakeLists.txt
+++ b/aten/src/ATen/cpu/tbb/CMakeLists.txt
@@ -7,6 +7,8 @@ project(tbb CXX)
 include(CheckCXXCompilerFlag)
 include(CheckCXXSourceRuns)
 
+include(GNUInstallDirs)
+
 if(POLICY CMP0058)
   cmake_policy(SET CMP0058 NEW)
 endif()
@@ -25,16 +27,16 @@ if(NOT TBB_INSTALL_EXPORT_NAME)
   set(TBB_INSTALL_EXPORT_NAME "Caffe2Targets")
 endif()
 if(NOT TBB_INSTALL_EXPORT_DESTINATION)
-  set(TBB_INSTALL_EXPORT_DESTINATION lib)
+  set(TBB_INSTALL_EXPORT_DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
 if(NOT TBB_INSTALL_RUNTIME_DIR)
-  set(TBB_INSTALL_RUNTIME_DIR bin)
+  set(TBB_INSTALL_RUNTIME_DIR ${CMAKE_INSTALL_BINDIR})
 endif()
 if(NOT TBB_INSTALL_LIBRARY_DIR)
-  set(TBB_INSTALL_LIBRARY_DIR lib)
+  set(TBB_INSTALL_LIBRARY_DIR ${CMAKE_INSTALL_LIBDIR})
 endif()
 if(NOT TBB_INSTALL_ARCHIVE_DIR)
-  set(TBB_INSTALL_ARCHIVE_DIR lib)
+  set(TBB_INSTALL_ARCHIVE_DIR ${CMAKE_INSTALL_LIBDIR})
 endif()
 if(NOT TBB_INSTALL_INCLUDE_DIR)
   set(TBB_INSTALL_INCLUDE_DIR "${TBB_ROOT_DIR}/include")
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index 17fd7e6..0c7f3d6 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -104,12 +104,12 @@ endif()
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10 EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
-        DESTINATION include
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
         FILES_MATCHING PATTERN "*.h")
 install(FILES ${CMAKE_BINARY_DIR}/c10/macros/cmake_macros.h
-        DESTINATION include/c10/macros)
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/c10/macros)
 
 if(MSVC AND C10_BUILD_SHARED_LIBS)
   install(FILES $<TARGET_PDB_FILE:c10> DESTINATION lib OPTIONAL)
diff --git a/c10/cuda/CMakeLists.txt b/c10/cuda/CMakeLists.txt
index 26d9675..87475e0 100644
--- a/c10/cuda/CMakeLists.txt
+++ b/c10/cuda/CMakeLists.txt
@@ -61,13 +61,13 @@ add_subdirectory(test)
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10_cuda EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_cuda EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 foreach(file ${C10_CUDA_HEADERS})
   get_filename_component( dir ${file} DIRECTORY )
-  install( FILES ${file} DESTINATION include/c10/cuda/${dir} )
+  install( FILES ${file} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/c10/cuda/${dir} )
 endforeach()
 install(FILES ${CMAKE_BINARY_DIR}/c10/cuda/impl/cuda_cmake_macros.h
-  DESTINATION include/c10/cuda/impl)
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/c10/cuda/impl)
 
 if(MSVC AND C10_CUDA_BUILD_SHARED_LIBS)
   install(FILES $<TARGET_PDB_FILE:c10_cuda> DESTINATION lib OPTIONAL)
diff --git a/c10/hip/CMakeLists.txt b/c10/hip/CMakeLists.txt
index 6a0e0e4..301f286 100644
--- a/c10/hip/CMakeLists.txt
+++ b/c10/hip/CMakeLists.txt
@@ -55,9 +55,9 @@ target_include_directories(
 add_subdirectory(test)
 
 # ---[ Installation
-install(TARGETS c10_hip EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10_hip EXPORT Caffe2Targets DESTINATION ${CMAKE_INSTALL_LIBDIR})
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
-        DESTINATION include
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
         FILES_MATCHING PATTERN "*.h")
 install(FILES ${CMAKE_BINARY_DIR}/c10/hip/impl/hip_cmake_macros.h
-  DESTINATION include/c10/hip/impl)
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/c10/hip/impl)
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 584d56e..304f355 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -260,15 +260,15 @@ set(TORCH_SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../torch")
 set(TORCH_ROOT "${TORCH_SRC_DIR}/..")
 
 if(NOT TORCH_INSTALL_BIN_DIR)
-  set(TORCH_INSTALL_BIN_DIR bin)
+  set(TORCH_INSTALL_BIN_DIR ${CMAKE_INSTALL_BINDIR})
 endif()
 
 if(NOT TORCH_INSTALL_INCLUDE_DIR)
-  set(TORCH_INSTALL_INCLUDE_DIR include)
+  set(TORCH_INSTALL_INCLUDE_DIR ${CMAKE_INSTALL_INCLUDEDIR})
 endif()
 
 if(NOT TORCH_INSTALL_LIB_DIR)
-  set(TORCH_INSTALL_LIB_DIR lib)
+  set(TORCH_INSTALL_LIB_DIR ${CMAKE_INSTALL_LIBDIR})
 endif()
 
 
@@ -1249,7 +1249,7 @@ if(BUILD_PYTHON)
   if(${BUILDING_WITH_TORCH_LIBS})
     # site-packages/caffe2/python/caffe2_pybind11_state
     # site-packages/torch/lib
-    set(caffe2_pybind11_rpath "${_rpath_portable_origin}/../../torch/lib")
+    set(caffe2_pybind11_rpath "${_rpath_portable_origin}/../../torch/${CMAKE_INSTALL_LIBDIR}")
   endif(${BUILDING_WITH_TORCH_LIBS})
 
   # Must also include `CMAKE_SHARED_LINKER_FLAGS` in linker flags for
diff --git a/caffe2/proto/CMakeLists.txt b/caffe2/proto/CMakeLists.txt
index ac48fd7..eefd297 100644
--- a/caffe2/proto/CMakeLists.txt
+++ b/caffe2/proto/CMakeLists.txt
@@ -16,4 +16,4 @@ endif()
 target_compile_definitions(
     Caffe2_PROTO PRIVATE ${Caffe2_API_DEFINE})
 
-install(FILES ${Caffe2_PROTO_HEADERS} DESTINATION include/caffe2/proto)
+install(FILES ${Caffe2_PROTO_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/caffe2/proto)
diff --git a/modules/detectron/CMakeLists.txt b/modules/detectron/CMakeLists.txt
index 730626d..053692e 100644
--- a/modules/detectron/CMakeLists.txt
+++ b/modules/detectron/CMakeLists.txt
@@ -16,7 +16,7 @@ if(BUILD_CAFFE2_OPS)
         ${Detectron_GPU_SRCS})
 
     target_link_libraries(caffe2_detectron_ops_gpu torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops_gpu DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_gpu DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops_gpu> DESTINATION lib OPTIONAL)
     endif()
@@ -29,7 +29,7 @@ if(BUILD_CAFFE2_OPS)
         ${Detectron_HIP_SRCS})
     target_compile_options(caffe2_detectron_ops_hip PRIVATE ${HIP_CXX_FLAGS})
     target_link_libraries(caffe2_detectron_ops_hip torch)
-    install(TARGETS caffe2_detectron_ops_hip DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops_hip DESTINATION ${CMAKE_INSTALL_LIBDIR})
   elseif(NOT IOS_PLATFORM)
     add_library(caffe2_detectron_ops SHARED ${Detectron_CPU_SRCS})
     if(HAVE_SOVERSION)
@@ -37,7 +37,7 @@ if(BUILD_CAFFE2_OPS)
         VERSION ${TORCH_VERSION} SOVERSION ${TORCH_SOVERSION})
     endif()
     target_link_libraries(caffe2_detectron_ops torch ${OpenMP_link})
-    install(TARGETS caffe2_detectron_ops DESTINATION lib)
+    install(TARGETS caffe2_detectron_ops DESTINATION ${CMAKE_INSTALL_LIBDIR})
     if(MSVC)
       install(FILES $<TARGET_PDB_FILE:caffe2_detectron_ops> DESTINATION lib OPTIONAL)
     endif()
diff --git a/modules/module_test/CMakeLists.txt b/modules/module_test/CMakeLists.txt
index 696bd5d..f476fa0 100644
--- a/modules/module_test/CMakeLists.txt
+++ b/modules/module_test/CMakeLists.txt
@@ -16,7 +16,7 @@ if(BUILD_TEST)
         VERSION ${TORCH_VERSION} SOVERSION ${TORCH_SOVERSION})
   endif()
   target_link_libraries(caffe2_module_test_dynamic torch_library)
-  install(TARGETS caffe2_module_test_dynamic DESTINATION lib)
+  install(TARGETS caffe2_module_test_dynamic DESTINATION ${CMAKE_INSTALL_LIBDIR})
   if(MSVC AND BUILD_SHARED_LIBS)
     install(FILES $<TARGET_PDB_FILE:caffe2_module_test_dynamic> DESTINATION lib OPTIONAL)
   endif()
diff --git a/modules/observers/CMakeLists.txt b/modules/observers/CMakeLists.txt
index 8796354..0309a27 100644
--- a/modules/observers/CMakeLists.txt
+++ b/modules/observers/CMakeLists.txt
@@ -21,7 +21,7 @@ endif()
 target_link_libraries(caffe2_observers PUBLIC torch_library)
 target_include_directories(caffe2_observers PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/..)
 target_compile_options(caffe2_observers PRIVATE "-DCAFFE2_BUILD_OBSERVER_LIB")
-install(TARGETS caffe2_observers DESTINATION lib)
+install(TARGETS caffe2_observers DESTINATION ${CMAKE_INSTALL_LIBDIR})
 caffe2_interface_library(caffe2_observers caffe2_observers_library)
 if(MSVC AND BUILD_SHARED_LIBS)
   install(FILES $<TARGET_PDB_FILE:caffe2_observers> DESTINATION lib OPTIONAL)
diff --git a/modules/rocksdb/CMakeLists.txt b/modules/rocksdb/CMakeLists.txt
index 7865198..52bfd14 100644
--- a/modules/rocksdb/CMakeLists.txt
+++ b/modules/rocksdb/CMakeLists.txt
@@ -59,7 +59,7 @@ add_library(caffe2_rocksdb ${CMAKE_CURRENT_SOURCE_DIR}/rocksdb.cc)
 target_link_libraries(caffe2_rocksdb PUBLIC torch_library)
 target_link_libraries(caffe2_rocksdb PRIVATE ${RocksDB_LIBRARIES})
 target_include_directories(caffe2_rocksdb PRIVATE ${RocksDB_INCLUDE_DIR})
-install(TARGETS caffe2_rocksdb DESTINATION lib)
+install(TARGETS caffe2_rocksdb DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 # ---[ Last, Append the library to Caffe2_MODULES, if we are building with
 # the main repo.
diff --git a/test/cpp/api/CMakeLists.txt b/test/cpp/api/CMakeLists.txt
index ef4b7ac..4008fb8 100644
--- a/test/cpp/api/CMakeLists.txt
+++ b/test/cpp/api/CMakeLists.txt
@@ -67,7 +67,7 @@ if(NOT MSVC)
 endif()
 
 if(INSTALL_TEST)
-  install(TARGETS test_api DESTINATION bin)
+  install(TARGETS test_api DESTINATION ${CMAKE_INSTALL_BINDIR})
   # Install PDB files for MSVC builds
   if(MSVC AND BUILD_SHARED_LIBS)
     install(FILES $<TARGET_PDB_FILE:test_api> DESTINATION bin OPTIONAL)
diff --git a/test/cpp/dist_autograd/CMakeLists.txt b/test/cpp/dist_autograd/CMakeLists.txt
index 5d23602..e4287c6 100644
--- a/test/cpp/dist_autograd/CMakeLists.txt
+++ b/test/cpp/dist_autograd/CMakeLists.txt
@@ -20,7 +20,7 @@ if(USE_DISTRIBUTED)
   endif()
 
   if(INSTALL_TEST)
-    install(TARGETS test_dist_autograd DESTINATION bin)
+    install(TARGETS test_dist_autograd DESTINATION ${CMAKE_INSTALL_BINDIR})
     # Install PDB files for MSVC builds
     if(MSVC AND BUILD_SHARED_LIBS)
       install(FILES $<TARGET_PDB_FILE:test_dist_autograd> DESTINATION bin OPTIONAL)
diff --git a/test/cpp/jit/CMakeLists.txt b/test/cpp/jit/CMakeLists.txt
index c91b7fc..5217dfe 100644
--- a/test/cpp/jit/CMakeLists.txt
+++ b/test/cpp/jit/CMakeLists.txt
@@ -80,7 +80,7 @@ elseif(USE_ROCM)
 endif()
 
 if(INSTALL_TEST)
-  install(TARGETS test_jit DESTINATION bin)
+  install(TARGETS test_jit DESTINATION ${CMAKE_INSTALL_BINDIR})
   # Install PDB files for MSVC builds
   if(MSVC AND BUILD_SHARED_LIBS)
     install(FILES $<TARGET_PDB_FILE:test_jit> DESTINATION bin OPTIONAL)
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index 1aa4d49..424e7a9 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -21,7 +21,7 @@ set(TORCH_SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
 set(TORCH_ROOT "${TORCH_SRC_DIR}/..")
 
 if(NOT TORCH_INSTALL_LIB_DIR)
-  set(TORCH_INSTALL_LIB_DIR lib)
+  set(TORCH_INSTALL_LIB_DIR ${CMAKE_INSTALL_LIBDIR})
 endif()
 
 if(MSVC)
diff --git a/torch/lib/c10d/CMakeLists.txt b/torch/lib/c10d/CMakeLists.txt
index 68fe49f..1913cdb 100644
--- a/torch/lib/c10d/CMakeLists.txt
+++ b/torch/lib/c10d/CMakeLists.txt
@@ -142,7 +142,7 @@ endif()
 
 target_link_libraries(c10d PUBLIC ${C10D_LIBS})
 
-install(TARGETS c10d DESTINATION lib)
+install(TARGETS c10d DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 option(BUILD_EXAMPLES "Build examples" OFF)
 if(BUILD_EXAMPLES)
@@ -156,4 +156,4 @@ if(BUILD_TEST)
 endif()
 
 # Install all header files that were prepared in the build directory
-install(DIRECTORY ${CMAKE_BINARY_DIR}/include/ DESTINATION include)
+install(DIRECTORY ${CMAKE_BINARY_DIR}/include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
diff --git a/torch/lib/libshm/CMakeLists.txt b/torch/lib/libshm/CMakeLists.txt
index 17916d6..a52c867 100644
--- a/torch/lib/libshm/CMakeLists.txt
+++ b/torch/lib/libshm/CMakeLists.txt
@@ -6,7 +6,7 @@ set(TORCH_ROOT ${CMAKE_CURRENT_LIST_DIR}/../../../)
 include(${TORCH_ROOT}/cmake/public/threads.cmake)
 
 if(NOT LIBSHM_INSTALL_LIB_SUBDIR)
-  set(LIBSHM_INSTALL_LIB_SUBDIR "lib" CACHE PATH "libshm install library directory")
+  set(LIBSHM_INSTALL_LIB_SUBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "libshm install library directory")
 endif()
 
 # Flags
@@ -36,7 +36,7 @@ target_include_directories(shm PUBLIC
 
 add_executable(torch_shm_manager manager.cpp)
 target_link_libraries(torch_shm_manager shm)
-set_target_properties(torch_shm_manager PROPERTIES INSTALL_RPATH "${_rpath_portable_origin}/../lib")
+set_target_properties(torch_shm_manager PROPERTIES INSTALL_RPATH "${_rpath_portable_origin}/../${CMAKE_INSTALL_LIBDIR}")
 ### Torch packages supposes libraries prefix is "lib"
 set_target_properties(shm PROPERTIES
   PREFIX "lib"
@@ -81,5 +81,5 @@ endif()
 
 
 install(TARGETS shm LIBRARY DESTINATION ${LIBSHM_INSTALL_LIB_SUBDIR})
-install(FILES libshm.h DESTINATION "include")
-install(TARGETS torch_shm_manager DESTINATION "bin")
+install(FILES libshm.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(TARGETS torch_shm_manager DESTINATION ${CMAKE_INSTALL_BINDIR})
-- 
2.26.2

